@use '@carbon/react/scss/config' as *;
@use 'TableHead/table-head' as *;
@use 'TableFoot/table-foot' as *;
@use 'TableSkeletonWithHeaders/table-skeleton-with-headers' as *;
@use 'TableCellRenderer/table-cell-renderer' as *;
@use 'TableDetailWizard/table-detail-wizard' as *;
@use 'TableMultiSortModal/table-multi-sort-modal' as *;
@use '../../globals/vars' as *;
@use '../../globals/mixins' as *;
@use '@carbon/react/scss/config' as *;
@use '@carbon/react/scss/spacing' as *;
@use '@carbon/react/scss/theme' as *;
@use '@carbon/react/scss/colors' as *;
@use '@carbon/react/scss/utilities/box-shadow' as *;
@use '@carbon/react/scss/layer' as *;
@use '../../globals/mixins' as *;
@use '@carbon/react/scss/utilities/convert';
@use '@carbon/react/scss/components/data-table/sort/data-table-sort' as *;
@use '@carbon/react/scss/components/data-table' as *;

table.#{$prefix}--side-nav--data-table {
  white-space: nowrap;
}

.#{$iot-prefix}--data-table--row-actions {
  height: 0;
}

.#{$iot-prefix}--data-table--fixed {
  table-layout: fixed;
}

.#{$iot-prefix}--data-table--column-groups {
  border-collapse: separate;
}

.#{$iot-prefix}--table__cell--truncate {
  max-width: 0;
}

td.#{$iot-prefix}--table__cell--sortable {
  padding-right: $spacing-07;
}

.#{$iot-prefix}--data-table--resize td {
  word-break: break-all;
}

.#{$iot-prefix}--table-container {
  min-width: unset;
  padding-top: 0;

  .addons-iot-table-container {
    overflow-x: auto;
  }

  &--pin-header-and-footer {
    height: 100%;

    .addons-iot-table-container,
    .#{$prefix}--data-table-content {
      height: inherit;
    }

    thead {
      position: sticky;
      top: 0;
      z-index: 4;
    }

    .#{$prefix}--table-toolbar {
      z-index: 5;
    }
  }
}

.#{$iot-prefix}-table-container--dropdown-height-fix {
  background-color: $layer-01;
  min-height: calc(#{$spacing-10} * 5);
  .#{$prefix}--data-table-content {
    min-height: calc(#{$spacing-10} * 5);
  }
}

html[dir='rtl'] {
  .#{$iot-prefix}--expanded-tablerow td:first-of-type:before {
    left: auto;
    right: 0;
  }
  .#{$iot-prefix}--expanded-tablerow > td * {
    text-align: right;
  }

  td.#{$iot-prefix}--table__cell--sortable {
    padding-left: $spacing-07;
  }
}

.#{$iot-prefix}--empty-table--table-row {
  height: calc(100% - #{$spacing-09});
  &:hover td {
    background: inherit;
  }
  .empty-table-cell--default {
    --height-threshold: 500px;
    --is-large-card: Min(1px, Max(var(--card-content-height) - var(--height-threshold), 0px));
    display: flex;
    align-items: flex-start;
    justify-content: center;
    flex-direction: column;
    // 3rem since we can't multiply 1px * 3rem in calc
    // stylelint-disable-next-line declaration-property-unit-disallowed-list
    padding: Max(calc(48 * var(--is-large-card)), 0px);
    svg {
      margin: $spacing-05 $spacing-05 $spacing-05 0;
    }
  }

  td {
    border-bottom: unset;
  }
}

.#{$iot-prefix}--table__advanced-filters-container {
  background-color: $layer-01;
  padding: $spacing-02 $spacing-04;
  border-top: 1px solid $layer-accent-01;
}

// needed specificity to override .iot--tooltip-svg-wrapper and allow flyout to align
// properly with button
button.#{$prefix}--btn.#{$iot-prefix}--tooltip-svg-wrapper.#{$prefix}--btn--ghost.#{$iot-prefix}--table-toolbar__advanced-filters-button {
  border: 1px solid transparent;

  &.#{$iot-prefix}--table-toolbar-button-active {
    @include box-shadow();
  }
}

.#{$iot-prefix}--table-toolbar__advanced-filters-button.#{$iot-prefix}--table-toolbar-button-active.#{$iot-prefix}--flyout-menu--trigger-button {
  @include hide-tooltip();
}

// regression fix for tiny expand chrevron on some expandable table rows
.#{$prefix}--data-table thead th.#{$prefix}--table-expand,
.#{$prefix}--data-table tbody td.#{$prefix}--table-expand {
  height: $spacing-07;
  width: $spacing-08;
}

.#{$iot-prefix}--table__row--selectable {
  .#{$prefix}--checkbox {
    cursor: pointer;
  }
}

.#{$iot-prefix}--table__row--unselectable:not(.#{$iot-prefix}--table__row--editing) {
  &:hover {
    &,
    td {
      background-color: inherit;
      color: $text-secondary;
      border-bottom-color: $layer-accent-01;
      border-top-color: $layer-01;
    }
  }
}

.#{$iot-prefix}--table__row--background td {
  background-color: $layer-accent-01;
}

.#{$iot-prefix}--table__row--singly-selected,
.#{$iot-prefix}--expandable-tablerow--singly-selected {
  cursor: pointer;

  td:first-of-type {
    position: relative;

    &:after {
      content: '';
      position: absolute;
      // -1px because the parent has a 1px border at the top, so we need to fill that gap
      top: -1px;
      left: 0;
      height: calc(100% + 1px);
      width: convert.to-rem(3px);
      background-color: $border-interactive;
      border-right: solid 1px $highlight;
    }
  }
}

.#{$iot-prefix}--expandable-tablerow--expanded {
  td.#{$prefix}--table-expand {
    position: relative;
    left: var(--row-nesting-offset);
  }

  td:first-of-type:before {
    content: '';
    position: absolute;
    // -1px because the parent has a 1px border at the top, so we need to fill that gap
    top: -1px;
    left: calc(var(--row-nesting-offset) * -1);
    height: calc(100% + 1px);
    width: var(--row-nesting-offset);
    background-color: $layer-01;
    border-right: solid 1px $layer-01;
  }

  &[data-nesting-offset='0'] {
    td:first-of-type:before {
      border-right: 0;
    }
  }
  td.bx--table-expand[data-previous-value='collapsed'] {
    border-bottom: solid 1px $layer-01;
  }
}

.#{$iot-prefix}--table__cell__offset {
  position: relative;
  left: var(--row-nesting-offset);
  max-width: calc(100% - var(--row-nesting-offset));
  display: block;

  [dir='rtl'] & {
    left: unset;
    right: var(--row-nesting-offset);
  }

  &__expand {
    left: unset;
    margin-left: var(--row-nesting-offset);
  }
}

.#{$iot-prefix}--expanded-tablerow {
  td {
    padding: 0;
    font-weight: bold;
  }
}

.#{$iot-prefix}--expandable-tablerow {
  cursor: pointer;
  td {
    div .#{$prefix}--btn--ghost:hover {
      background: $layer-accent-01;
    }
  }
}

.#{$iot-prefix}--expandable-tablerow--indented {
  td.#{$prefix}--table-expand {
    position: relative;
    left: var(--row-nesting-offset);
    border-bottom: 1px solid $layer-01;

    [dir='rtl'] & {
      left: unset;
      right: var(--row-nesting-offset);
    }
  }

  td:first-of-type {
    // add a white indention block to create space on the left-side of nested rows.
    &:before {
      content: '';
      position: absolute;
      // -1px because the parent has a 1px border at the top, so we need to fill that gap
      top: -1px;
      left: calc(-1 * var(--row-nesting-offset));
      height: calc(100% + 1px);
      width: var(--row-nesting-offset);
      background-color: $layer-01;
      border-right: solid 1px $layer-01;
      border-bottom: solid 1px $layer-01;

      [dir='rtl'] & {
        left: unset;
        right: calc(-1 * var(--row-nesting-offset));
      }
    }

    // add a white bottom-border to mask the existing rows border to get all the nested row borders
    // to align properly.
    &:after {
      content: '';
      position: absolute;
      left: 0;
      height: 1px;
      bottom: -1px;
      width: $spacing-03;
      border-bottom: solid 1px $layer-01;

      [dir='rtl'] & {
        left: unset;
        right: 0;
      }
    }
  }

  // using an :after pseudo-element we pad the bottom borders of nested rows
  // so that the bottom border all align for siblings
  &.#{$iot-prefix}--expandable-tablerow--childless,
  &.#{$iot-prefix}--expandable-tablerow--expanded,
  &.#{$iot-prefix}--expandable-tablerow--last-child {
    td:first-of-type:after {
      content: '';
      position: absolute;
      left: 0;
      height: 1px;
      bottom: -1px;
      width: $spacing-03;
      border-bottom: solid 1px $layer-01;

      [dir='rtl'] & {
        left: unset;
        right: 0;
      }
    }
  }

  // and if one of these siblings (above) is expanded, we need to lengthen that border in white to
  // cover up the bottom border of the row and to visually show that row is expanded. ie. the border
  // doesn't interfere with the open space between the parent and the children.
  &.#{$iot-prefix}--expandable-tablerow--expanded {
    td:first-of-type:after {
      width: $spacing-08;
    }
  }

  // the last child in a nested group needs to extend the bottom border to the left, so that it
  // aligns with the borders of the parent above it.
  &.#{$iot-prefix}--expandable-tablerow--last-child {
    td:first-of-type:after {
      left: -($spacing-06);
      width: $spacing-07;
      border-bottom-color: $layer-accent-01;

      [dir='rtl'] & {
        left: unset;
        right: -($spacing-06);
      }
    }
  }

  // the last child of a one-level indention row needs a little more width
  // to position the after element correctly and close up the bottom border
  &.#{$iot-prefix}--expandable-tablerow--last-child[data-nesting-offset='32'] {
    td:first-of-type:after {
      left: -($spacing-07);
      width: $spacing-08;
      border-bottom-color: $layer-accent-01;

      [dir='rtl'] & {
        left: unset;
        right: -($spacing-07);
      }
    }
  }
}

.#{$iot-prefix}--expandable-tablerow--childless {
  & .#{$prefix}--table-expand button.#{$iot-prefix}--table-expand__button {
    display: none;
  }
}

.#{$iot-prefix}--expandable-tablerow--parent {
  td {
    font-weight: bold;
  }
}

.#{$iot-prefix}--pin-first-col {
  @include pin-nth-column(1) {
    z-index: 3;
    left: 0;
    [dir='rtl'] & {
      left: unset;
      right: 0;
    }
  }

  /*
   * Table with row selection
   */
  &--select {
    @include pin-nth-column(2) {
      z-index: 1;
      left: convert.to-rem(52px);
      [dir='rtl'] & {
        left: unset;
        right: convert.to-rem(52px);
      }
    }
    @include disable-nth-col-border(1);
  }

  /*
   * Table with nested rows
   */
  &--expand {
    @include pin-nth-column(2) {
      z-index: 2;
      left: convert.to-rem(40px);
      [dir='rtl'] & {
        left: unset;
        right: convert.to-rem(40px);
      }
    }
    @include disable-nth-col-border(1);

    .#{$iot-prefix}--expandable-tablerow--expanded td:nth-of-type(1),
    .#{$iot-prefix}--expandable-tablerow--indented td:nth-of-type(1) {
      left: var(--row-nesting-offset); // Resetting for expanded rows
    }
  }

  /*
   * Table with nesting and selection
   */
  &--select#{&}--expand {
    @include pin-nth-column(3) {
      z-index: 1;
      left: convert.to-rem(92px);
      [dir='rtl'] & {
        left: unset;
        right: convert.to-rem(92px);
      }
    }
    @include disable-nth-col-border(1);
    @include disable-nth-col-border(2);
  }
}

.#{$iot-prefix}--pin-last-col {
  td:last-of-type,
  th:last-of-type {
    position: sticky;
    z-index: 1;
    right: 0;
    // filter: drop-shadow(-1px 0 0 $border-disabled);

    min-width: convert.to-rem(56px);
    width: convert.to-rem(56px); // Needed for fixed/resizable columns that don't respect min-width

    [dir='rtl'] & {
      right: unset;
      left: 0;
      // filter: drop-shadow(1px 0 0 $border-disabled);
    }
  }

  &.#{$iot-prefix}--table-head--with-column-groups
    .#{$iot-prefix}--table-header__column-row
    th:last-of-type {
    position: sticky;
  }

  th.#{$iot-prefix}--filter-header-row--header.#{$iot-prefix}--tableheader-filter
    .#{$iot-prefix}--filter-header-icon {
    z-index: 2;
  }
}
