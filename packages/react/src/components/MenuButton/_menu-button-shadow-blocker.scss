@use '../../globals/vars' as *;
@use '@carbon/react/scss/config' as *;
@use '@carbon/react/scss/theme' as *;
@use '@carbon/react/scss/colors' as *;
@use '@carbon/react/scss/utilities/convert';
$size-sm: convert.to-rem(32px);
$size-md: convert.to-rem(40px);
$size-lg: convert.to-rem(48px);
$shadow-blocker-height: convert.to-rem(8px);
$shadow-blocker-border-width: convert.to-rem(1px);

@mixin shadow-blocker-element {
  position: absolute;
  display: block;
  height: calc(#{$shadow-blocker-height} - #{$shadow-blocker-border-width});
}

// COVER THE SHADOW WITH A NEW DIV
// We add a new div on a higher z-index in order to cover the shadow of the menu.
.#{$iot-prefix}--menu-button--icon-only.#{$prefix}--menu--open {
  .#{$iot-prefix}--menu__shadow-blocker {
    @include shadow-blocker-element;
    top: calc((-#{$shadow-blocker-height}) + #{$shadow-blocker-border-width});
    left: 0;
    width: $size-sm; // small is the default size
    background-color: $layer-01;
    border-bottom: $shadow-blocker-border-width solid $layer-01;

    &--flip-y {
      left: unset;
      right: 0;
    }

    &--flip-x {
      left: unset;
      top: var(--menu-height);
    }

    html[dir='rtl'] & {
      &:not(.#{$iot-prefix}--menu__shadow-blocker--opens-horizontally) {
        left: 0;
      }
    }

    &--md {
      width: $size-md;
    }
    &--lg {
      width: $size-lg;
    }

    // The menu is attached to the side (instead of above or below)
    &--opens-horizontally {
      $width: calc(#{$shadow-blocker-height} - #{$shadow-blocker-border-width});

      top: 0;
      height: $size-sm; // small is the default size
      width: $width;
      left: calc((#{$width}) * (-1));
      border-bottom: none;
      border-right: $shadow-blocker-border-width solid $layer-01;

      &.#{$iot-prefix}--menu__shadow-blocker--flip-y {
        right: calc((#{$width}) * (-1));
        left: unset;
        border-right: none;
        border-left: $shadow-blocker-border-width solid $layer-01;
      }

      &.#{$iot-prefix}--menu__shadow-blocker--md {
        height: $size-md;
        width: $width;
      }
      &.#{$iot-prefix}--menu__shadow-blocker--lg {
        height: $size-lg;
        width: $width;
      }
    }
  }

  // If the menu has focus it has a blue border and that one needs to
  // be restored since it is covered by the shadow-blocker
  &:focus .#{$iot-prefix}--menu__shadow-blocker {
    border-bottom: $shadow-blocker-border-width solid $focus;
    &--flip-x {
      border-bottom-color: $layer-01;
      border-top: $shadow-blocker-border-width solid $focus;
    }
    &--opens-horizontally {
      border-bottom: none;
      border-right: $shadow-blocker-border-width solid $focus;
      &.#{$iot-prefix}--menu__shadow-blocker--flip-y {
        border-right: none;
        border-left: $shadow-blocker-border-width solid $focus;
      }
    }
  }
}

// RESTORE THE BLUE FOCUS BORDER OF THE BUTTON
// This needed to make sure the blue focus border of the actual button is not covered by the element
// introduced to cover the shadow of the menu. This style has to be placed on the button since the menu
// does not know when the button has focus.
.#{$iot-prefix}--menu-button--open {
  .#{$prefix}--btn.#{$prefix}--btn--icon-only.#{$prefix}--btn--ghost:focus:not(:active) {
    @function calculate-width($size) {
      @return calc(#{$size} - (2 * #{$shadow-blocker-border-width}));
    }
    @function calculate-top($size) {
      @return calc(#{$size} - #{$shadow-blocker-height} - #{$shadow-blocker-border-width});
    }

    &::after {
      @include shadow-blocker-element;
      width: calculate-width($size-lg); // large is the default
      top: calculate-top($size-lg); // large is the default
      content: '';
      left: calc(#{$shadow-blocker-border-width} * (-1));
      background-color: transparent;
      z-index: 9001; // z-index of the menu is 9000
      border: none;
      border-bottom: $shadow-blocker-border-width solid $focus;
      border-left: $shadow-blocker-border-width solid $focus;
      border-right: $shadow-blocker-border-width solid $focus;
      // We need to unset some properties added by other styling also using ::after
      // e.g. the ones from tooltip__trigger
      border-radius: 0;
      transform: none;
      box-shadow: none;
      padding: 0;
    }
    &.#{$prefix}--btn--md::after {
      width: calculate-width($size-md);
      top: calculate-top($size-md);
    }
    &.#{$prefix}--btn--sm::after {
      width: calculate-width($size-sm);
      top: calculate-top($size-sm);
    }
  }

  &.#{$iot-prefix}--menu-button--flip-x
    .#{$prefix}--btn.#{$prefix}--btn--icon-only.#{$prefix}--btn--ghost:focus:not(:active)::after {
    top: (-$shadow-blocker-border-width);
    border-top: $shadow-blocker-border-width solid $focus;
    border-bottom: 0;
  }

  // The menu is attached to the side (instead of above or below)
  &.#{$iot-prefix}--menu-button--opens-horizontally {
    .#{$prefix}--btn.#{$prefix}--btn--icon-only.#{$prefix}--btn--ghost:focus:not(:active) {
      @function calculate-middle($size) {
        @return calc(
          ((#{$size} - #{$shadow-blocker-height}) * 0.5) - #{$shadow-blocker-border-width}
        );
      }

      &::after {
        transform: rotate(-90deg);
        top: calculate-middle($size-lg);
        left: calculate-middle($size-lg);
      }

      &.#{$prefix}--btn--md::after {
        top: calculate-middle($size-md);
        left: calculate-middle($size-md);
      }
      &.#{$prefix}--btn--sm::after {
        top: calculate-middle($size-sm);
        left: calculate-middle($size-sm);
      }
    }

    &.#{$iot-prefix}--menu-button--flip-y {
      .#{$prefix}--btn.#{$prefix}--btn--icon-only.#{$prefix}--btn--ghost:focus:not(:active) {
        @function calculate-negative-middle($size) {
          /* stylelint-disable scss/operator-no-newline-after */
          @return calc(
            (((#{$size} - #{$shadow-blocker-height}) * 0.5) + #{$shadow-blocker-border-width}) *
              (-1)
          );
        }

        &::after {
          transform: rotate(90deg);
          left: calculate-negative-middle($size-lg);
        }
        &.#{$prefix}--btn--md::after {
          left: calculate-negative-middle($size-md);
        }
        &.#{$prefix}--btn--sm::after {
          left: calculate-negative-middle($size-sm);
        }
      }
    }
  }
}
